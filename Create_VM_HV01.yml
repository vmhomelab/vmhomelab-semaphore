- name: Create Virtual Machine
  hosts: hv01

  tasks:
    - name: Create Virtual Machine
      ansible.windows.win_shell: |
        $Name="{{ VM_Name }}"
        $VHDX={{ VM_VHDX_Size }}
        $RAM={{ VM_RAM }}
        $CPU="{{ VM_CPU }}"
        $NWAdapter="{{ VM_Switch }}"
        $vLAN="{{ VM_vLANid }}"
        $Path="D:\Virtual Hard Disk\{{ VM_Name }}\System.vhdx"
        $ISOPath="{{ VM_ISO }}"
        
        # Creating VM
        New-VM -Name $Name -Path 'D:\Configuration Files\Virtual Machines' -MemoryStartupBytes $RAM -NewVHDPath $Path -NewVHDSizeBytes $VHDX -Generation 2
        
        # Adding DVD drive and connecting ISO
        Add-VMDvdDrive -VMName $Name -Path $ISOPath
        
        # Setting CPU Count
        Set-VMProcessor $Name -Count $CPU
        
        # Configuring Network Adapter and VLAN
        $vmAdapter = Get-VM $Name | Get-VMNetworkAdapter
        $vmAdapter | Connect-VMNetworkAdapter -SwitchName $NWAdapter
        $vmAdapter | Set-VMNetworkAdapterVlan -VlanId $vLAN -Access

    - name: Set boot order
      ansible.windows.win_shell: |
        $Name="{{ VM_Name }}"
        Set-VMFirmware $Name -BootOrder $(Get-VMDvdDrive -VMName $Name), $(Get-VMHardDiskDrive -VMName $Name), $(Get-VMNetworkAdapter -VMName $Name)

    - name: Start created VM
      ansible.windows.win_shell: |
        $Name="{{ VM_Name }}"
        Start-VM -Name $Name

    - name: Wait until the VM responds to ping 5 times
      ansible.windows.win_shell: |
        $Name="{{ VM_Name }}"
        $PingCount = 0
        while ($PingCount -lt 5) {
            if (Test-Connection -ComputerName $Name -Count 1 -Quiet) {
                $PingCount++
                Write-Host "$Name responded to ping ($PingCount/5)"
            } else {
                $PingCount = 0
                Write-Host "$Name did not respond, resetting count"
            }
            Start-Sleep -Seconds 5
        }
      register: ping_result

    - name: Execute PowerShell script after VM is responding
      ansible.windows.win_shell: |
        # Define your bot token and chat ID
        $BotToken = "7064185524:AAEDGYXhe9S4EUDXeocZsSAm3kZLiHgm3DQ"
        $ChatID = "1752571361"
        # Get the last created VM
        $lastVM = Get-VM | Sort-Object -Property CreationTime -Descending | Select-Object -First 1
        # Get the Hyper-V server's hostname
        $HyperVHostName = (Get-ComputerInfo).CsName
        if ($lastVM -ne $null) {
            $VMName = $lastVM.Name
            $VMState = $lastVM.State
            # Construct the message
            $Message = "The VM '$VMName' is up and running with the state: $VMState on Hyper-V host: $HyperVHostName."
            # Construct the API URL
            $apiURL = "https://api.telegram.org/bot$BotToken/sendMessage"
            # Prepare the payload
            $payload = @{
                chat_id = $ChatID
                text    = $Message
            }
            # Send the message using Invoke-RestMethod
            try {
                $response = Invoke-RestMethod -Uri $apiURL -Method POST -ContentType "application/json" -Body ($payload | ConvertTo-Json)
                if ($response.ok) {
                    Write-Output "Message sent successfully!"
                } else {
                    Write-Output "Failed to send message. Response: $($response | ConvertTo-Json)"
                }
            } catch {
                Write-Output "Error: $_"
            }
        } else {
            Write-Output "No VMs found on this Hyper-V host."
        }
        Write-Host "PowerShell script executed."
      when: ping_result is success
